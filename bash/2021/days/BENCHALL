#!/bin/bash
# benchmarks all the *-2 tests with the full input
# with numeric args, bench only these tests
# Options:
# -l    use logarithmic scale

err(){ echo "***ERROR: $*" >&2; exit 1;}
export TIMEFORMAT='%3R'
if [[ $1 = '-l' ]]; then
    shift
    log=true
    legend=" (logarithmic)"
    barunit=10                  # 1 char is barunit decimal log of time in ms
else
    log=false
    legend=
    barunit=200                 # 1 char is barunit of time in ms
fi

echo "| test | time | bar graph of times$legend |"
echo "| :--- | ---: | :---- |"

bench(){
    local script="$1"
    [[ -x $script ]] || err "Script not found: $script"
    time=$(bash -c "time $script 1>/dev/null" 2>&1)
    ms=${time//./}
    [[ $ms =~ ^0+([[:digit:]]+)$ ]] && ms="${BASH_REMATCH[1]}"
    if "$log"; then
        len=$(echo "l($ms)/l(10)*$barunit" | bc -l)
        len="${len%.*}"
    else
        len=$((ms / barunit))
    fi
    barline=$(barline "$len" "$ms")
    echo "| ${script%%-*} | $time | \`$barline\` |"
}

barline(){
    local len="$1" ms="$2" c i
    if ((ms < 100)); then c='-'
    elif ((ms < 500)); then c='~'
    elif ((ms < 1000)); then c='+'
    elif ((ms < 10000)); then c='='
    else c='#'
    fi
    for ((i=0; i<len; i++)); do echo -n "$c"; done
}
         
if [[ -z $1 ]]; then
    for script in d*-2.sh; do bench "$script"; done
else
    for n in "$@"; do [[ ${#n} == 1 ]] && n="0$n"; bench "d$n-2.sh"; done
fi
